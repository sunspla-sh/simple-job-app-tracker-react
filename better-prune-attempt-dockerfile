# ----- BUILDER-WEB -----
# PRUNE SO THAT WE HAVE ONLY PACKAGES - ALLOWS DOCKER CACHING TO SKIP REINSTALL PACKAGES WHEN WE CHANGE JS/HTML/CSS etc.
FROM node:19-alpine AS builder

RUN apk add --no-cache libc6-compat

RUN apk add bash

RUN apk update

#need to set bash as default shell because pnpm setup command is expecting bash, zsh, or fish
SHELL ["/bin/bash", "-c"]

RUN npm install --global pnpm \
    && SHELL=bash pnpm setup \
    && source /root/.bashrc

ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="${PATH}:${PNPM_HOME}"

WORKDIR /app

RUN pnpm add -g turbo

COPY . .

RUN turbo prune --scope=web --docker

RUN mv out out-web

RUN turbo prune --scope=crx --docker

RUN mv out out-crx

RUN turbo prune --scope=api --docker

RUN mv out out-api


# ----- INSTALLER -----
# INSTALL PACKAGES - THEY CHANGE LESS OFTEN SO DOCKER CACHING WILL BE ABLE TO ACCELERATE THIS STEP FREQUENTLY
FROM node:19-alpine AS installer

RUN apk add --no-cache libc6-compat

RUN apk add bash

RUN apk update

#need to set bash as default shell because pnpm setup command is expecting bash, zsh, or fish
SHELL ["/bin/bash", "-c"]

RUN npm install --global pnpm \
    && SHELL=bash pnpm setup \
    && source /root/.bashrc

ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="${PATH}:${PNPM_HOME}"

WORKDIR /app

COPY --from=builder /app/out-web/json .

COPY --from=builder /app/out-crx/json .

COPY --from=builder /app/out-api/json .

#Need original pnpm-lock.yaml here - not pruned versions
COPY --from=builder /app/pnpm-lock.yaml .

RUN pnpm install

COPY --from=builder /app/out-web/full .

COPY --from=builder /app/out-crx/full .

COPY --from=builder /app/out-api/full .

COPY turbo.json turbo.json

RUN pnpm run build